package MVC.Model.DungeonItems;

import MVC.Model.DungeonAdventure.DungeonCharacters.EntityFactory;
import MVC.Model.DungeonAdventure.DungeonCharacters.Hero;
import MVC.Model.DungeonUtils.Graph;
import MVC.Model.Physics.Vec2;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class Dungeon implements Serializable
{
    //DUNGEON KEEPS TRACK OF THE LOCATION OF THE HERO
    //DUNGEON KNOWS ONLY GENERAL ROOM POSITION
    //ROOM KNOWS SPECIFIC ENTRANCE/EXIT

    private Room[][] myDungeon;

    private List<Room> myRooms;

    private int myDimension;

    private static EntityFactory myEntityFactory;

    public Dungeon()
    {
        myDimension = 4;
        myRooms = generateRooms(myDimension);
        myDungeon = generateDungeonFromRooms(myRooms,myDimension);
    }

    public Dungeon(final EntityFactory theEntityFactory, final int theDimension)
    {
        if(theDimension<=2)
        {
            System.out.println("Minimum Dimension for the dungeon is 3 by 3. We are setting up the 4 by 4 maze");
            myDimension = 4;
        }
        else
        {
            myDimension = theDimension;
        }
        myEntityFactory = theEntityFactory;
        myRooms = generateRooms(myDimension);
        myDungeon = generateDungeonFromRooms(myRooms,myDimension);
    }

    /**
     * @return sets the Rooms' entrances directions and positions according to the map generated by the Kruskal
     */
    public Room[][] generateDungeonFromRooms(List<Room> theRooms, int theDimension)
    {
        var edges = Graph.generateMaze(theDimension);
        System.out.println(edges.size());
        var offset = theDimension+2;
        int src;
        int dest;
        for (int i = 0; i < edges.size(); i++)
        {
            src = edges.get(i).getSrc()-offset;
            dest = edges.get(i).getDest()-offset;
            if(src > dest)
            {
                var temp = src;
                src = dest;
                dest = temp;
            }

            if(src==dest-1)
            {
                for (int j = 0; j < theRooms.size(); j++)
                {
                    if(theRooms.get(j).getNumber()==src)
                    {
                        theRooms.get(j).setE(true);
                        theRooms.get(j+1).setW(true);
                    }
                }
            }
            else if (src==dest-offset)
            {
                for (int j = 0; j < theRooms.size(); j++)
                {
                    if(theRooms.get(j).getNumber()==src)
                    {
                        theRooms.get(j).setN(true);
                        theRooms.get(j+theDimension).setS(true);
                    }
                }
            }
        }

        var answer = new Room[(theDimension)][(theDimension)];

        for (var room:theRooms)
        {
            room.populateTheRoom(false);
            answer[(int) room.getLocation().getMyX()][(int) room.getLocation().getMyY()] = room;
        }
        return answer;
    }

    public static ArrayList<Room> generateRooms(int n1)
    {
        var arr = new ArrayList<Room>();
        // Number of rooms + boundary rooms
        int allVertices = (int) Math.pow((Math.sqrt(n1*n1)+2),2);

        for (int i = 1; i < ((n1+2)*n1)-1; i++)
        {
            //Skip buffer rooms
            if(i % Math.sqrt(allVertices) == Math.sqrt(allVertices)-1 || i % Math.sqrt(allVertices) == 0)
            {
                continue;
            }

            //Account for the buffer offset
            //Adjust for positive value library coordinate system
            int row = (i / (n1 + 2));
            int col = (i % (n1 + 2)) - 1;
            arr.add(new Room(i, new Vec2(col,row)));
        }

//        for (int i = 0; i < arr.size(); i++)
//        {
//            if(i>=(n1*(i-1)))
//            {
//                arr.get(i).setLocation(arr.get(i).getLocation().minus(new Vec2()));
//            }
//            else
//            {
//                arr.get(i).setLocation(arr.get(i).getLocation().minus(new Vec2()));
//            }
//        }

        for (int i = 0; i < 4; i++)
        {
            var room = arr.get(new Random().nextInt(1,arr.size()));
            room.addItem("pillar");
        }

        arr.get(0).setEntranceStatus(true);
        arr.get(new Random().nextInt(1,arr.size())).setExitStatus(true).addItem("exit"); //added new EntityFactory param

        return arr;
    }

    public Room[][] getDungeon()
    {
        return myDungeon;
    }

    public List<Room> getRooms()
    {
        return myRooms;
    }

    public int getDimension()
    {
        return myDimension;
    }

    public void setRooms(final List<Room> theRooms)
    {
        myRooms = theRooms;
    }

    public Memento saveToMemento() throws CloneNotSupportedException
    {
        return new Memento(this.myDungeon, myEntityFactory.getHero(),
                copyRooms(this.myRooms), this.myDimension);
    }

    private List<Room> copyRooms(final List<Room> theRooms) throws CloneNotSupportedException
    {
        ArrayList<Room> answer = new ArrayList<>();
        for (var room:theRooms)
        {
            answer.add(room.clone());
        }
        return answer;
    }
    public void restoreFromMemento(Memento memento)
    {
        var dungeon = memento.getSavedState();
        myDungeon = dungeon.getDungeon();
        myRooms = dungeon.getRooms();
        myDimension = dungeon.getDimension();
    }

    public static class Memento
    {
        private final Room[][] myDungeon;

        private final Hero myHero;

        private List<Room> myRooms;

        private int myDimension;

        public Memento(final Room[][] theDungeon, final Hero theHero, final List<Room> theRooms, final int theDimension)
        {
           myDimension =theDimension;
            myDungeon = theDungeon;
            myHero = theHero;
            myRooms = theRooms;
        }

        private Memento getSavedState()
        {
            return new Memento(myDungeon,myHero,myRooms,myDimension);
        }

        private Room[][] getDungeon()
        {
            return myDungeon;
        }

        private Hero getHero()
        {
            return myHero;
        }

        private List<Room> getRooms()
        {
            return myRooms;
        }

        private int getDimension()
        {
            return myDimension;
        }
    }
}